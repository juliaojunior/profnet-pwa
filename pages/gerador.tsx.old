// pages/gerador.tsx
import React, { useState } from 'react';
import { useRouter } from 'next/router';
import styled from 'styled-components';
import { theme } from '../styles/theme';
import { Layout } from '../components/Layout';
import { FaChevronDown, FaChevronUp } from 'react-icons/fa';

const Container = styled.div`
  max-width: 800px;
  margin: 0 auto;
  padding: ${theme.spacing.lg};
`;
const Title = styled.h1`
  text-align: center;
  font-family: ${theme.fonts.heading};
  font-size: 2rem;
  color: ${theme.colors.primary};
  margin-bottom: ${theme.spacing.lg};
`;
const Card = styled.div`
  background: white;
  border-radius: ${theme.rounded.lg};
  box-shadow: ${theme.shadows.md};
  overflow: hidden;
  margin-bottom: ${theme.spacing.lg};
  transition: transform 0.2s;
  &:hover { transform: translateY(-4px); }
`;
const CardHeader = styled.div`
  background: ${theme.colors.primary};
  padding: ${theme.spacing.md};
  color: white;
  display: flex;
  justify-content: space-between;
  align-items: center;
  cursor: pointer;
`;
const CardTitle = styled.span`
  font-size: 1.25rem;
  font-weight: 600;
`;
const CardBody = styled.div<{ expanded: boolean }>`
  padding: ${({ expanded }) => (expanded ? theme.spacing.md : '0')} ;
  max-height: ${({ expanded }) => (expanded ? '1000px' : '0')};
  overflow: hidden;
  transition: max-height 0.3s ease, padding 0.3s ease;
`;
const Label = styled.label`
  display: block;
  font-weight: 500;
  margin-bottom: ${theme.spacing.sm};
`;
const Select = styled.select`
  width: 100%;
  padding: ${theme.spacing.sm};
  border: 1px solid #E2E8F0;
  border-radius: 8px;
  background: #F7FAFC;
  font-size: 1rem;
`;
const Input = styled.input`
  width: 100%;
  padding: ${theme.spacing.sm};
  border: 1px solid #E2E8F0;
  border-radius: 8px;
  background: #F7FAFC;
  font-size: 1rem;
`;
const TextArea = styled.textarea`
  width: 100%;
  padding: ${theme.spacing.sm};
  border: 1px solid #E2ECF0;
  border-radius: 8px;
  background: #F7FAFC;
  resize: vertical;
  min-height: 80px;
  font-size: 1rem;
`;
const Button = styled.button`
  background: ${theme.colors.secondary};
  color: white;
  padding: 12px 24px;
  border: none;
  border-radius: 8px;
  font-size: 1rem;
  font-weight: 600;
  cursor: pointer;
  transition: background 0.2s;
  &:hover { background: ${theme.colors.primary}; }
`;

export default function GeradorPage() {
  const router = useRouter();
  const [expandedSections, setExpandedSections] = useState<{ [key: string]: boolean }>({
    tipo: true,
    detalhes: false,
    publico: false,
    conteudos: false,
    estrategias: false,
  });
  const [tipo, setTipo] = useState('Plano de Aula');
  const [form, setForm] = useState({
    titulo: '', objetivo: '', publico: '', disciplina: '',
    conteudos: '', recursos: '', estrategias: '', avaliacao: '', observacoes: ''
  });
  const [resultado, setResultado] = useState('');

  const tipos = ['Plano de Aula', 'Plano de Curso', 'Lista de Exerc√≠cios', 'Projeto Pedag√≥gico'];

  const handleChange = (e: React.ChangeEvent<any>) => {
    const { name, value } = e.target;
    setForm(prev => ({ ...prev, [name]: value }));
  };
  const toggleSection = (key: string) => {
    setExpandedSections(prev => ({ ...prev, [key]: !prev[key] }));
  };

  const gerar = async () => {
    const { titulo, objetivo, publico, disciplina, conteudos, recursos, estrategias, avaliacao, observacoes } = form;
    const prompt = `Comporte-se como um especialista em educa√ß√£o, um professor com 30 anos de experi√™ncia. Preciso que voc√™ prepare um ${tipo} bem detalhado. Use as informa√ß√µes a seguir para elaborar ${tipo}.
Tema: ${titulo}
Objetivo: ${objetivo}
P√∫blico: ${publico}
Disciplina: ${disciplina}
Conte√∫dos: ${conteudos}
Recursos: ${recursos}
Estrat√©gias: ${estrategias}
Avalia√ß√£o: ${avaliacao}
Observa√ß√µes: ${observacoes}`;

    console.log('üì§ Iniciando chamada √† API');
    setResultado('‚è≥ Gerando conte√∫do com IA...');
    try {
      const resposta = await fetch('/api/gerar', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ prompt })
      });
      console.log('üîÅ Status da resposta:', resposta.status);
      const data = await resposta.json();
      console.log('üì® Payload retornado da API:', data);
      setResultado(data.resultado || '‚ùå Erro ao gerar conte√∫do.');
    } catch (e: any) {
      console.error('üö® Erro dentro do gerar():', e);
      setResultado('‚ùå Erro ao gerar conte√∫do: ' + (e.message || e.toString()));
    }
  };

  return (
    <Layout>
      <Container>
        <Title>üß† Gerador de Conte√∫do AI</Title>
        {/* Se√ß√µes em cards */}
        <Card>
          <CardHeader onClick={() => toggleSection('tipo')}>
            <CardTitle>Tipo de Conte√∫do: {tipo}</CardTitle>
            {expandedSections.tipo ? <FaChevronUp /> : <FaChevronDown />}
          </CardHeader>
          <CardBody expanded={expandedSections.tipo}>
            <Select name="tipo" value={tipo} onChange={e => setTipo(e.target.value)}>
              {tipos.map(t => <option key={t}>{t}</option>)}
            </Select>
          </CardBody>
        </Card>
        <Card>
          <CardHeader onClick={() => toggleSection('detalhes')}>
            <CardTitle>Detalhes B√°sicos</CardTitle>
            {expandedSections.detalhes ? <FaChevronUp /> : <FaChevronDown />}
          </CardHeader>
          <CardBody expanded={expandedSections.detalhes}>
            <Label>T√≠tulo ou Tema</Label>
            <Input name="titulo" value={form.titulo} onChange={handleChange} placeholder="T√≠tulo ou Tema" />
            <Label>Objetivo Geral</Label>
            <TextArea name="objetivo" value={form.objetivo} onChange={handleChange} placeholder="Objetivo Geral" />
          </CardBody>
        </Card>
        <Card>
          <CardHeader onClick={() => toggleSection('publico')}>
            <CardTitle>P√∫blico e Disciplina</CardTitle>
            {expandedSections.publico ? <FaChevronUp /> : <FaChevronDown />}
          </CardHeader>
          <CardBody expanded={expandedSections.publico}>
            <Label>P√∫blico-alvo</Label>
            <Input name="publico" value={form.publico} onChange={handleChange} placeholder="P√∫blico-alvo" />
            <Label>Disciplina</Label>
            <Input name="disciplina" value={form.disciplina} onChange={handleChange} placeholder="Disciplina" />
          </CardBody>
        </Card>
        <Card>
          <CardHeader onClick={() => toggleSection('conteudos')}>
            <CardTitle>Conte√∫dos e Recursos</CardTitle>
            {expandedSections.conteudos ? <FaChevronUp /> : <FaChevronDown />}
          </CardHeader>
          <CardBody expanded={expandedSections.conteudos}>
            <Label>Conte√∫dos</Label>
            <TextArea name="conteudos" value={form.conteudos} onChange={handleChange} placeholder="Conte√∫dos a abordar" />
            <Label>Recursos</Label>
            <TextArea name="recursos" value={form.recursos} onChange={handleChange} placeholder="Recursos did√°ticos" />
          </CardBody>
        </Card>
        <Card>
          <CardHeader onClick={() => toggleSection('estrategias')}>
            <CardTitle>Estrat√©gias e Avalia√ß√£o</CardTitle>
            {expandedSections.estrategias ? <FaChevronUp /> : <FaChevronDown />}
          </CardHeader>
          <CardBody expanded={expandedSections.estrategias}>
            <Label>Estrat√©gias</Label>
            <TextArea name="estrategias" value={form.estrategias} onChange={handleChange} placeholder="Estrat√©gias de ensino" />
            <Label>Avalia√ß√£o</Label>
            <TextArea name="avaliacao" value={form.avaliacao} onChange={handleChange} placeholder="Avalia√ß√£o" />
            <Label>Observa√ß√µes</Label>
            <TextArea name="observacoes" value={form.observacoes} onChange={handleChange} placeholder="Observa√ß√µes adicionais" />
          </CardBody>
        </Card>
        <div style={{ textAlign: 'center', marginTop: theme.spacing.lg }}>
          <Button onClick={gerar}>ü§ñ Gerar Conte√∫do</Button>
        </div>
        {resultado && (
          <Card style={{ marginTop: theme.spacing.lg }}>
            <CardBody expanded>
              <pre style={{ whiteSpace: 'pre-wrap', margin: 0 }}>{resultado}</pre>
            </CardBody>
          </Card>
        )}
      </Container>
    </Layout>
  );
}













